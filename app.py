from io import BytesIO
from datetime import datetime
import textwrap

import streamlit as st
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.colors import HexColor, black

# =============================
# Streamlit-app (ingen Flask)
# =============================
st.set_page_config(
    page_title="Sj√§lvskattning ‚Äì Funktionellt ledarskap",
    page_icon="üìÑ",
    layout="centered",
)

# ---------- Design (√§ggskalsvit bakgrund) ----------
# Fast √§ggskalsvit (fr√•n din bild) ‚Äì √§ndra hex om du vill finjustera
eggshell_hex = "#F8F1E7"

# Applicera bakgrund i UI
st.markdown(
    f"""
    <style>
      .stApp {{ background-color: {eggshell_hex}; }}
      .block-container {{ padding-top: 2rem; padding-bottom: 3rem; }}
      /* Typografi ‚Äì matcha PDF (Helvetica) */
      html, body, [class*="css"] { font-family: Helvetica, Arial, sans-serif; }
      /* H1 = 22pt ‚âà 29px */
      .stMarkdown h1 { font-size: 29px; font-weight: 700; margin: 0 0 6px 0; }
      /* H2 = 14pt ‚âà 18.7px */
      .stMarkdown h2 { font-size: 19px; font-weight: 700; margin: 24px 0 8px 0; }
      /* Br√∂dtext = 11pt ‚âà 14.7px, radavst√•nd ‚âà 16pt ‚Üí ~21px */
      .stMarkdown p, .stMarkdown { font-size: 15px; line-height: 21px; }
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------- Datamodell f√∂r sidans inneh√•ll ----------
# Allt inneh√•ll renderas fr√•n denna modell OCH samma modell anv√§nds f√∂r PDF.
PAGE_TITLE_LINES = ["Sj√§lvskattning", "Funktionellt ledarskap"]  # tv√• rader, samma storlek
SECTIONS = [
    {
        "title": "Aktivt lyssnande",
        "text": (
            "F√∂rm√•gan att vara n√§rvarande i samtal och aktivt lyssna p√• medarbetare √§r en grundl√§ggande del av ett "
            "funktionellt ledarskap. Det handlar om att verkligen f√∂rst√• vad den andra personen s√§ger ‚Äì b√•de genom ord "
            "och k√§nslor ‚Äì och visa att du lyssnar. Reflektera √∂ver hur ofta du skapar utrymme f√∂r andra att uttrycka "
            "sig utan att avbryta."
        ),
    },
    {
        "title": "√Öterkoppling",
        "text": (
            "√Öterkoppling √§r en central del i ledarskap som skapar utveckling, tydlighet och motivation. Fundera p√• hur "
            "du ger √•terkoppling ‚Äì b√•de positiv och korrigerande ‚Äì och om den landar p√• ett s√§tt som st√§rker f√∂rtroendet. "
            "Ett funktionellt ledarskap bygger p√• kontinuerlig, konstruktiv √•terkoppling."
        ),
    },
    {
        "title": "M√•linriktning",
        "text": (
            "Att vara m√•linriktad handlar inte bara om att s√§tta upp m√•l, utan att skapa mening och riktning i vardagen. "
            "Hur tydliga √§r era m√•l i teamet? Vet alla varf√∂r de g√∂r det de g√∂r? Reflektera √∂ver hur du som ledare skapar "
            "engagemang kring m√•len."
        ),
    },
]

# ---------- Rendera sidan ----------
# Tv√• H1-rubriker f√∂r samma teckenstorlek
st.markdown(f"# {PAGE_TITLE_LINES[0]}")
st.markdown(f"# {PAGE_TITLE_LINES[1]}")

for block in SECTIONS:
    st.header(block["title"])  # H2
    st.write(block["text"])    # br√∂dtext

st.divider()
st.caption("Klicka p√• knappen nedan f√∂r att ladda ner en PDF som speglar allt inneh√•ll p√• sidan.")

# ---------- PDF-generering fr√•n samma datamodell ----------

def generate_pdf_from_sections(title_lines, sections):
    """Skapar en PDF som speglar sidans design: tv√• H1-rader, √§ggskalsvit bakgrund, rubriker & br√∂dtext."""
    buf = BytesIO()
    pdf = canvas.Canvas(buf, pagesize=A4)
    width, height = A4

    # Bakgrund (√§ggskalsvit)
    pdf.setFillColor(HexColor(eggshell_hex))
    pdf.rect(0, 0, width, height, fill=1, stroke=0)
    pdf.setFillColor(black)  # tillbaka till svart text

    # Marginaler och typografi
    margin_x = 50
    top_y = height - 60
    h1_size = 22  # samma storlek f√∂r b√•da rader
    h2_size = 14
    body_size = 11
    line_h = 16  # radavst√•nd f√∂r br√∂dtext

    # Dokumenttitel
    pdf.setTitle("sj√§lvskattning_funktionellt_ledarskap.pdf")

    # Rita tv√• H1-rader med samma storlek
    current_y = top_y
    pdf.setFont("Helvetica-Bold", h1_size)
    for line in title_lines:
        if line.strip():
            pdf.drawString(margin_x, current_y, line)
            current_y -= h1_size + 4  # spacing mellan titelrader

    # Tidsst√§mpel √∂vre h√∂gra h√∂rnet
    pdf.setFont("Helvetica", 9)
    timestamp = datetime.now().strftime("Genererad: %Y-%m-%d %H:%M")
    pdf.drawRightString(width - margin_x, top_y + 4, timestamp)

    # Startposition f√∂r textfl√∂de
    y = current_y - 10

    def ensure_space(needed_px: int):
        nonlocal y
        if y - needed_px < 50:  # sidfotmarginal
            pdf.showPage()
            # Ny sida med samma bakgrund & liten sidhuvudstitel
            pdf.setFillColor(HexColor(eggshell_hex))
            pdf.rect(0, 0, width, height, fill=1, stroke=0)
            pdf.setFillColor(black)
            pdf.setFont("Helvetica", 9)
            pdf.drawString(margin_x, height - 40, " ".join(title_lines))
            y = height - 60

    for block in sections:
        # Sektionstitel (H2)
        ensure_space(30)
        pdf.setFont("Helvetica-Bold", h2_size)
        pdf.drawString(margin_x, y, block["title"])
        y -= h2_size + 6

        # Br√∂dtext
        pdf.setFont("Helvetica", body_size)
        wrapped = textwrap.wrap(block["text"], width=95)
        for line in wrapped:
            ensure_space(line_h)
            pdf.drawString(margin_x, y, line)
            y -= line_h
        y -= 6  # extra luft mellan sektioner

    pdf.showPage()
    pdf.save()
    buf.seek(0)
    return buf.getvalue()


pdf_bytes = generate_pdf_from_sections(PAGE_TITLE_LINES, SECTIONS)

st.download_button(
    label="Ladda ner PDF",
    data=pdf_bytes,
    file_name="sj√§lvskattning_funktionellt_ledarskap.pdf",
    mime="application/pdf",
    type="primary",
)
