# app.py
from io import BytesIO
from datetime import datetime
import os, textwrap, string, secrets, requests

import streamlit as st
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.colors import HexColor, black, Color

# =============================
# GrundinstÃ¤llningar / tema
# =============================
st.set_page_config(page_title="SjÃ¤lvskattning â€“ Funktionellt ledarskap", page_icon="ðŸ“„", layout="centered")

EGGSHELL = "#FAF7F0"
st.markdown(
    f"""
    <style>
      .stApp {{ background-color: {EGGSHELL}; }}
      .block-container {{ padding-top: 2rem; padding-bottom: 3rem; }}
      html, body, [class*="css"] {{ font-family: Helvetica, Arial, sans-serif; }}
      .stMarkdown h1 {{ font-size: 29px; font-weight: 700; margin: 0 0 6px 0; }}
      .stMarkdown h2 {{ font-size: 19px; font-weight: 700; margin: 24px 0 8px 0; }}
      .stMarkdown p, .stMarkdown {{ font-size: 15px; line-height: 21px; }}

      .card {{ background:#fff; border-radius:12px; border:1px solid rgba(0,0,0,.12);
               box-shadow:0 6px 20px rgba(0,0,0,.08); padding:14px 16px; }}
      .hero {{ text-align:center; padding:34px 28px; }}
      .hero h1 {{ font-size:34px; margin:0 0 8px 0; }}
      .hero p  {{ color:#374151; margin:0 0 18px 0; }}

      .note {{ border-left: 6px solid #3B82F6; background:#EAF2FF; color:#0F172A;
               padding:14px 16px; border-radius:10px; }}

      .contact-card {{ padding:12px 14px; }}
      .contact-title {{ font-weight:700; font-size:19px; margin: 6px 0 10px 0; }}

      .right-wrap {{ display:flex; align-items:center; justify-content:center; }}
      .res-card {{ max-width:380px; width:100%; padding:16px 18px; }}
      .role-label {{ font-size:13px; color:#111827; margin:10px 0 6px 0; display:block; font-weight:600; }}
      .barbg {{ width:100%; height:10px; background:#E9ECEF; border-radius:6px; overflow:hidden; }}
      .barfill {{ height:10px; display:block; }}
      .bar-green {{ background:#4CAF50; }}
      .bar-orange {{ background:#F5A524; }}
      .bar-blue {{ background:#3B82F6; }}
      .maxline {{ font-size:13px; color:#374151; margin-top:12px; font-weight:600; }}
    </style>
    """,
    unsafe_allow_html=True,
)

# =============================
# Power Automate (valfritt; gÃ¶r inget om URL ej satt)
# =============================
FLOW_LOOKUP_URL = os.getenv("FLOW_LOOKUP_URL", "").strip()
FLOW_LOG_URL    = os.getenv("FLOW_LOG_URL", "").strip()

def safe_post(url: str, payload: dict):
    if not url:
        return False, None, "No URL configured"
    try:
        r = requests.post(url, json=payload, timeout=20)
        if 200 <= r.status_code < 300:
            try:
                return True, (r.json() if r.content else {}), None
            except Exception:
                return True, {}, None
        return False, None, f"HTTP {r.status_code}: {r.text[:200]}"
    except Exception as e:
        return False, None, str(e)

# =============================
# Texter & sektioner fÃ¶r resultatdelen
# =============================
PAGE_TITLE = "SjÃ¤lvskattning â€“ Funktionellt ledarskap"
SECTIONS = [
    {
        "key": "lyssnande",
        "title": "Aktivt lyssnande",
        "max": 49,  # 7 frÃ¥gor
        "text": """I dagens arbetsliv har chefens roll fÃ¶rÃ¤ndrats. Medarbetarna sitter ofta pÃ¥ den djupaste kompetensen och lÃ¶sningarna pÃ¥ verksamhetens utmaningar.

DÃ¤rfÃ¶r Ã¤r aktivt lyssnande en av chefens viktigaste fÃ¤rdigheter. Det handlar inte bara om att hÃ¶ra vad som sÃ¤gs, utan om att fÃ¶rstÃ¥, visa intresse och anvÃ¤nda den information du fÃ¥r. NÃ¤r du bjuder in till dialog och tar till dig medarbetarnas perspektiv visar du att deras erfarenheter Ã¤r vÃ¤rdefulla.

Genom att agera pÃ¥ det du hÃ¶r â€“ bekrÃ¤fta, fÃ¶lja upp och omsÃ¤tta idÃ©er i handling â€“ stÃ¤rker du bÃ¥de engagemang, fÃ¶rtroende och delaktighet."""
    },
    {
        "key": "aterkoppling",
        "title": "Ã…terkoppling",
        "max": 56,  # 8 frÃ¥gor
        "text": """Effektiv Ã¥terkoppling Ã¤r grunden fÃ¶r bÃ¥de utveckling och motivation. Medarbetare behÃ¶ver veta vad som fÃ¶rvÃ¤ntas, hur de ligger till och hur de kan vÃ¤xa. NÃ¤r du som chef tydligt beskriver uppgifter och fÃ¶rvÃ¤ntade beteenden skapar du trygghet och fokus i arbetet.

Ã…terkoppling handlar sedan om nÃ¤rvaro och uppfÃ¶ljning â€“ att se, lyssna och ge bÃ¥de berÃ¶m och konstruktiv feedback. Genom att tydligt lyfta fram vad som fungerar och vad som kan fÃ¶rbÃ¤ttras, fÃ¶rstÃ¤rker du Ã¶nskvÃ¤rda beteenden och hjÃ¤lper dina medarbetare att lyckas.

I svÃ¥ra situationer blir Ã¥terkopplingen extra viktig. Att vara lugn, konsekvent och tydlig nÃ¤r det blÃ¥ser visar ledarskap pÃ¥ riktigt."""
    },
    {
        "key": "malinriktning",
        "title": "MÃ¥linriktning",
        "max": 35,  # 5 frÃ¥gor
        "text": """MÃ¥linriktat ledarskap handlar om att ge tydliga ramar â€“ tid, resurser och ansvar â€“ sÃ¥ att medarbetare kan arbeta effektivt och med trygghet. Tydliga och inspirerande mÃ¥l skapar riktning och hjÃ¤lper alla att fÃ¶rstÃ¥ vad som Ã¤r viktigt just nu.

Som chef handlar det om att formulera mÃ¥l som gÃ¥r att tro pÃ¥, och att tydliggÃ¶ra hur de ska nÃ¥s. NÃ¤r du delegerar ansvar och befogenheter visar du fÃ¶rtroende och skapar engagemang. MÃ¥len blir dÃ¥ inte bara nÃ¥got att leverera pÃ¥ â€“ utan nÃ¥got att vara delaktig i.

UppfÃ¶ljning Ã¤r nyckeln. Genom att uppmÃ¤rksamma framsteg, ge Ã¥terkoppling och fira resultat fÃ¶rstÃ¤rker du bÃ¥de prestation och motivation."""
    },
]

# =============================
# FrÃ¥gor (20 st) och instruktioner per roll
# =============================
# Chef â€“ tidigare frÃ¥gor (ofÃ¶rÃ¤ndrat)
CHEF_QUESTIONS = [
    "EfterfrÃ¥gar deras fÃ¶rslag nÃ¤r det gÃ¤ller hur arbetet kan fÃ¶rbÃ¤ttras",
    "EfterfrÃ¥gar deras idÃ©er nÃ¤r det gÃ¤ller planering av arbetet",
    "Uppmuntrar dem att uttrycka eventuella farhÃ¥gor nÃ¤r det gÃ¤ller arbetet",
    "Uppmuntrar dem att komma med fÃ¶rbÃ¤ttringsfÃ¶rslag fÃ¶r verksamheten",
    "Uppmuntrar dem att uttrycka idÃ©er och fÃ¶rslag",
    "AnvÃ¤nder dig av deras fÃ¶rslag nÃ¤r du fattar beslut som berÃ¶r dem",
    "Ã–vervÃ¤ger deras idÃ©er Ã¤ven nÃ¤r du inte hÃ¥ller med",
    "Talar om deras arbete som meningsfullt och viktigt",
    "Formulerar inspirerande mÃ¥lsÃ¤ttningar fÃ¶r deras arbete",
    "Beskriver hur deras arbete bidrar till viktiga vÃ¤rderingar och ideal",
    "Pratar pÃ¥ ett inspirerande sÃ¤tt om deras arbete",
    "Beskriver hur deras arbete bidrar till verksamhetens mÃ¥l",
    "Ã„r tydlig med hur deras arbete bidrar till verksamhetens effektivitet",
    "TillhandahÃ¥ller information som visar pÃ¥ betydelsen av deras arbete",
    "AnvÃ¤nder fakta och logik nÃ¤r du beskriver betydelsen av deras arbete",
    "Beskriver vilka arbetsuppgifter du vill att de utfÃ¶r",
    "Beskriver tidsplaner fÃ¶r de arbetsuppgifter du delegerar till dem",
    "Kommunicerar verksamhetens mÃ¥lsÃ¤ttningar pÃ¥ ett tydligt sÃ¤tt",
    "Ã„r tydlig med vad du fÃ¶rvÃ¤ntar dig av dem",
    "Ser till att dina medarbetares arbete samordnas",
]

# Medarbetare â€“ anvÃ¤nder samma 20 teman men riktat mot chefens beteende (som tidigare)
EMP_QUESTIONS = CHEF_QUESTIONS

# Ã–verordnad chef â€“ dina nya frÃ¥gor frÃ¥n bilden
OVER_QUESTIONS = [
    "EfterfrÃ¥gar andras fÃ¶rslag nÃ¤r det gÃ¤ller hur hens verksamhet kan fÃ¶rbÃ¤ttras",
    "EfterfrÃ¥gar andras idÃ©er nÃ¤r det gÃ¤ller planering av hens verksamhet",
    "Uppmuntrar andra att uttrycka eventuella farhÃ¥gor nÃ¤r det gÃ¤ller hens verksamhet",
    "Uppmuntrar andra att komma med fÃ¶rbÃ¤ttringsfÃ¶rslag fÃ¶r hens verksamhet",
    "Uppmuntrar andra att uttrycka idÃ©er och fÃ¶rslag",
    "AnvÃ¤nder sig av andras fÃ¶rslag nÃ¤r hen fattar beslut som berÃ¶r dem",
    "Ã–vervÃ¤ger andras idÃ©er Ã¤ven nÃ¤r hen inte hÃ¥ller med om dem",
    "Talar om sin verksamhet som meningsfull och viktig",
    "Formulerar inspirerande mÃ¥lsÃ¤ttningar",
    "Beskriver viktiga vÃ¤rderingar och ideal",
    "Pratar pÃ¥ ett inspirerande sÃ¤tt",
    "Beskriver sin verksamhets mÃ¥l",
    "Ã„r tydlig med sin verksamhets effektivitet",
    "TillhandahÃ¥ller relevant information",
    "AnvÃ¤nder fakta och logik",
    "Beskriver vem som Ã¤r ansvarig fÃ¶r vad",
    "Beskriver tidsplaner fÃ¶r de arbetsuppgifter som ska gÃ¶ras",
    "Kommunicerar verksamhetens mÃ¥lsÃ¤ttningar pÃ¥ ett tydligt sÃ¤tt",
    "Ã„r tydlig med vad hen fÃ¶rvÃ¤ntar sig av andra",
    "Ser till att arbetet samordnas",
]

# Indexgrupperna (gÃ¤ller alla tre enkÃ¤terna)
IDX_MAP = {
    "lyssnande": list(range(0, 7)),
    "aterkoppling": list(range(7, 15)),
    "malinriktning": list(range(15, 20)),
}

# Instruktionsrutor
INSTR_CHEF = (
    "**Chef**\n\n"
    "Syftet med frÃ¥gorna nedan Ã¤r att du ska beskriva hur du kommunicerar med dina medarbetare i frÃ¥gor som rÃ¶r deras arbete. "
    "AnvÃ¤nd fÃ¶ljande svarsskala: **1 = Aldrig, 2 = NÃ¤stan aldrig, 3 = SÃ¤llan, 4 = Ibland, 5 = Ofta, 6 = NÃ¤stan alltid, 7 = Alltid**. "
    "Ange hur ofta **du** gÃ¶r fÃ¶ljande:"
)
INSTR_EMP = (
    "**Medarbetare**\n\n"
    "Syftet med frÃ¥gorna nedan Ã¤r att du ska beskriva hur din chef kommunicerar med dig i frÃ¥gor som rÃ¶r ditt arbete. "
    "AnvÃ¤nd fÃ¶ljande svarsskala: **1 = Aldrig, 2 = NÃ¤stan aldrig, 3 = SÃ¤llan, 4 = Ibland, 5 = Ofta, 6 = NÃ¤stan alltid, 7 = Alltid**. "
    "Ange hur ofta **din chef** gÃ¶r fÃ¶ljande:"
)
INSTR_OVER = (
    "**Ã–verordnad chef**\n\n"
    "Syftet med frÃ¥gorna nedan Ã¤r att du ska beskriva hur din understÃ¤llda chef kommunicerar i arbetsrelaterade frÃ¥gor. "
    "AnvÃ¤nd fÃ¶ljande svarsskala: **1 = Aldrig, 2 = NÃ¤stan aldrig, 3 = SÃ¤llan, 4 = Ibland, 5 = Ofta, 6 = NÃ¤stan alltid, 7 = Alltid**. "
    "Ange hur ofta **din understÃ¤llda chef** gÃ¶r fÃ¶ljande:"
)

# =============================
# HjÃ¤lpare
# =============================
def generate_unikt_id(n=8) -> str:
    alphabet = string.ascii_uppercase + string.digits
    return "".join(secrets.choice(alphabet) for _ in range(n))

def do_rerun():
    try:
        st.rerun()
    except AttributeError:
        st.experimental_rerun()

def pdf_from_page(title: str, sections, results_map, kontaktinfo: dict) -> bytes:
    buf = BytesIO()
    pdf = canvas.Canvas(buf, pagesize=A4)
    w, h = A4
    pdf.setFillColor(HexColor(EGGSHELL)); pdf.rect(0,0,w,h,fill=1,stroke=0)
    pdf.setFillColor(black)

    margin = 50; y = h - 60
    pdf.setTitle("sjÃ¤lvskattning_funktionellt_ledarskap.pdf")
    pdf.setFont("Helvetica-Bold", 22); pdf.drawString(margin, y, title)
    pdf.setFont("Helvetica", 9); pdf.drawRightString(w - margin, y+4, datetime.now().strftime("Genererad: %Y-%m-%d %H:%M"))
    y -= 28

    pdf.setFont("Helvetica-Bold", 10); pdf.drawString(margin, y, "Kontaktuppgifter"); y -= 14
    pdf.setFont("Helvetica", 10)
    row = [
        f"Unikt id: {kontaktinfo.get('Unikt id','')}",
        f"Namn: {kontaktinfo.get('Namn','')}",
        f"FÃ¶retag: {kontaktinfo.get('FÃ¶retag','')}",
        f"Telefon: {kontaktinfo.get('Telefon','')}",
        f"E-post: {kontaktinfo.get('E-post','')}",
        f"Funktion: {kontaktinfo.get('Funktion','')}",
    ]
    txt = "   |   ".join(row)
    if len(txt) > 110:
        mid = len(row)//2
        pdf.drawString(margin, y, "   |   ".join(row[:mid])); y -= 14
        pdf.drawString(margin, y, "   |   ".join(row[mid:])); y -= 8
    else:
        pdf.drawString(margin, y, txt); y -= 14

    def ensure(n):
        nonlocal y
        if y - n < 50:
            pdf.showPage(); pdf.setFillColor(HexColor(EGGSHELL)); pdf.rect(0,0,w,h,fill=1,stroke=0)
            pdf.setFillColor(black); pdf.setFont("Helvetica",9); pdf.drawString(margin, h-40, title); y = h - 60

    bg = Color(0.91,0.92,0.94); green=Color(0.30,0.69,0.31); orange=Color(0.96,0.65,0.15); blue=Color(0.23,0.51,0.96)

    for s in sections:
        ensure(30)
        pdf.setFont("Helvetica-Bold", 14); pdf.drawString(margin, y, s["title"]); y -= 20
        pdf.setFont("Helvetica", 11)
        for para in s["text"].split("\n\n"):
            for ln in textwrap.wrap(para, width=95):
                ensure(16); pdf.drawString(margin, y, ln); y -= 16

        key, mx = s["key"], s["max"]
        for label, role, col in [("Chef","chef",green), ("Ã–verordnad chef","overchef",orange), ("Medarbetare","medarbetare",blue)]:
            val = int(results_map.get(key,{}).get(role,0))
            ensure(26); pdf.setFont("Helvetica-Bold",10); pdf.drawString(margin, y, f"{label}: {val} poÃ¤ng"); y -= 12
            bw, bh = w-2*margin, 8; pdf.setFillColor(bg); pdf.rect(margin, y, bw, bh, fill=1, stroke=0)
            fw = 0 if mx==0 else bw*(val/mx); pdf.setFillColor(col); pdf.rect(margin, y, fw, bh, fill=1, stroke=0)
            pdf.setFillColor(black); y -= 14
        pdf.setFont("Helvetica-Bold",10); pdf.drawString(margin, y, f"Max: {mx} poÃ¤ng"); y -= 18

    pdf.showPage(); pdf.save(); buf.seek(0); return buf.getvalue()

# =============================
# Sidor
# =============================
def render_landing():
    st.markdown(
        """
        <div class="card hero">
          <h1>SjÃ¤lvskattning â€“ Funktionellt ledarskap</h1>
          <p>Fyll i dina uppgifter nedan och starta sjÃ¤lvskattningen.</p>
        </div>
        """,
        unsafe_allow_html=True,
    )
    d = st.session_state.get("kontakt", {"Namn":"","FÃ¶retag":"","Telefon":"","E-post":"","Funktion":"Chef","Unikt id":""})
    with st.form("landing"):
        c1, c2 = st.columns([0.5, 0.5])
        with c1:
            namn = st.text_input("Namn", value=d["Namn"])
            tel  = st.text_input("Telefon", value=d["Telefon"])
            fun  = st.selectbox("Funktion", ["Chef","Ã–verordnad chef","Medarbetare"],
                                index=["Chef","Ã–verordnad chef","Medarbetare"].index(d["Funktion"]))
        with c2:
            fore = st.text_input("FÃ¶retag", value=d["FÃ¶retag"])
            mail = st.text_input("E-post", value=d["E-post"])
        start = st.form_submit_button("Starta", type="primary")

    if start:
        if not namn.strip() or not mail.strip():
            st.warning("Fyll i minst Namn och E-post.")
            return
        unikt_id = generate_unikt_id() if fun == "Chef" else ""
        st.session_state["kontakt"] = {
            "Namn": namn.strip(), "FÃ¶retag": fore.strip(), "Telefon": tel.strip(),
            "E-post": mail.strip(), "Funktion": fun, "Unikt id": unikt_id
        }
        if fun == "Chef":
            st.session_state["chef_answers"] = [None] * len(CHEF_QUESTIONS)
            st.session_state["survey_page"] = 0
            st.session_state["page"] = "chef_survey"
        else:
            st.session_state["page"] = "id_page"
        do_rerun()

def render_id_page():
    st.markdown("## Ange uppgifter fÃ¶r chefens sjÃ¤lvskattning")
    st.info("Detta steg gÃ¤ller fÃ¶r Ã–verordnad chef och Medarbetare.")

    base = st.session_state.get("kontakt", {})
    with st.form("idform"):
        c1, c2 = st.columns([0.55, 0.45])
        with c1:
            chef_first = st.text_input("Chefens fÃ¶rnamn", value=base.get("Chefens fÃ¶rnamn",""))
            uid = st.text_input("Unikt id", value=base.get("Unikt id",""))
        with c2:
            st.write(""); st.write(f"**Din roll:** {base.get('Funktion','')}")
        ok = st.form_submit_button("FortsÃ¤tt", type="primary")

    if ok:
        if not chef_first.strip() or not uid.strip():
            st.warning("Fyll i bÃ¥de **Chefens fÃ¶rnamn** och **Unikt id**.")
            return

        # valfritt logg/lookup
        _ = safe_post(FLOW_LOG_URL, {
            "action": "log",
            "uniqueId": uid.strip(),
            "firstName": chef_first.strip(),
            "role": "overchef" if base.get("Funktion") == "Ã–verordnad chef" else "medarbetare",
            "timestamp": datetime.utcnow().isoformat() + "Z",
        })
        ok_lu, data_lu, _err = safe_post(FLOW_LOOKUP_URL, {"action":"lookup","uniqueId": uid.strip()})
        if ok_lu and data_lu and data_lu.get("found"):
            if data_lu.get("name"):    st.session_state["kontakt"]["Namn"] = data_lu["name"]
            if data_lu.get("company"): st.session_state["kontakt"]["FÃ¶retag"] = data_lu["company"]
            if data_lu.get("email"):   st.session_state["kontakt"]["E-post"] = data_lu["email"]

        st.session_state["kontakt"]["Unikt id"] = uid.strip()
        st.session_state["kontakt"]["Chefens fÃ¶rnamn"] = chef_first.strip()

        # starta rÃ¤tt enkÃ¤t
        if base.get("Funktion") == "Medarbetare":
            st.session_state["other_answers"] = [None] * len(EMP_QUESTIONS)
            st.session_state["other_page"] = 0
            st.session_state["page"] = "other_survey"
        else:
            st.session_state["over_answers"] = [None] * len(OVER_QUESTIONS)
            st.session_state["over_page"] = 0
            st.session_state["page"] = "over_survey"
        do_rerun()

    if st.button("â—€ Tillbaka"):
        st.session_state["page"] = "landing"
        do_rerun()

# --- gemensamt render fÃ¶r 4Ã—5 sidor ---
def render_survey_core(title: str, instruction_md: str, questions: list[str], answers_key: str, page_key: str):
    st.markdown(f"## {title}")
    st.markdown(f"<div class='note'>{instruction_md}</div>", unsafe_allow_html=True)
    st.caption("Svara pÃ¥ varje pÃ¥stÃ¥ende pÃ¥ en skala 1â€“7. Du mÃ¥ste besvara alla frÃ¥gor pÃ¥ sidan fÃ¶r att gÃ¥ vidare.")

    if st.session_state.get("scroll_to_top"):
        st.markdown("<script>window.scrollTo(0,0);</script>", unsafe_allow_html=True)
        st.session_state["scroll_to_top"] = False

    ans = st.session_state.get(answers_key, [None]*len(questions))
    page = st.session_state.get(page_key, 0)

    per_page = 5
    start_idx = page * per_page
    end_idx = start_idx + per_page
    current_slice = list(enumerate(questions[start_idx:end_idx], start=start_idx+1))

    for i, q in current_slice:
        st.markdown(f"**{i}. {q}**")
        current_val = ans[i-1]
        idx = None
        if isinstance(current_val, int) and 1 <= current_val <= 7:
            idx = [1,2,3,4,5,6,7].index(current_val)
        st.radio("", [1,2,3,4,5,6,7], index=idx, horizontal=True, label_visibility="collapsed", key=f"{answers_key}_q_{i}")
        st.session_state[answers_key][i-1] = st.session_state.get(f"{answers_key}_q_{i}")
        if i != current_slice[-1][0]:
            st.divider()

    col1, col2 = st.columns([0.5, 0.5])
    with col1:
        if page > 0 and st.button("â—€ Tillbaka"):
            st.session_state[page_key] = page - 1
            st.session_state["scroll_to_top"] = True
            do_rerun()
    with col2:
        page_answers = st.session_state[answers_key][start_idx:end_idx]
        all_filled = all(isinstance(v, int) and 1 <= v <= 7 for v in page_answers)
        if page < 3:
            if st.button("NÃ¤sta â–¶", disabled=not all_filled):
                st.session_state[page_key] = page + 1
                st.session_state["scroll_to_top"] = True
                do_rerun()
        else:
            if st.button("Skicka sjÃ¤lvskattning", type="primary", disabled=not all_filled):
                st.session_state["page"] = "assessment"
                do_rerun()

def render_chef_survey():
    render_survey_core("SjÃ¤lvskattning (Chef)", INSTR_CHEF, CHEF_QUESTIONS, "chef_answers", "survey_page")

def render_other_survey():
    render_survey_core("SjÃ¤lvskattning (Medarbetare)", INSTR_EMP, EMP_QUESTIONS, "other_answers", "other_page")

def render_over_survey():
    render_survey_core("SjÃ¤lvskattning (Ã–verordnad chef)", INSTR_OVER, OVER_QUESTIONS, "over_answers", "over_page")

def render_assessment():
    # Summera in svar (om de finns)
    scores = st.session_state.get("scores", {"lyssnande":{}, "aterkoppling":{}, "malinriktning":{}})

    if "chef_answers" in st.session_state:
        a = st.session_state["chef_answers"]
        def ssum(idx): return sum(v for i,v in enumerate(a) if i in idx and isinstance(v,int))
        scores["lyssnande"]["chef"]     = ssum(IDX_MAP["lyssnande"])
        scores["aterkoppling"]["chef"]  = ssum(IDX_MAP["aterkoppling"])
        scores["malinriktning"]["chef"] = ssum(IDX_MAP["malinriktning"])

    if "other_answers" in st.session_state:
        a = st.session_state["other_answers"]
        def ssum(idx): return sum(v for i,v in enumerate(a) if i in idx and isinstance(v,int))
        scores["lyssnande"]["medarbetare"]     = ssum(IDX_MAP["lyssnande"])
        scores["aterkoppling"]["medarbetare"]  = ssum(IDX_MAP["aterkoppling"])
        scores["malinriktning"]["medarbetare"] = ssum(IDX_MAP["malinriktning"])

    if "over_answers" in st.session_state:
        a = st.session_state["over_answers"]
        def ssum(idx): return sum(v for i,v in enumerate(a) if i in idx and isinstance(v,int))
        scores["lyssnande"]["overchef"]     = ssum(IDX_MAP["lyssnande"])
        scores["aterkoppling"]["overchef"]  = ssum(IDX_MAP["aterkoppling"])
        scores["malinriktning"]["overchef"] = ssum(IDX_MAP["malinriktning"])

    st.session_state["scores"] = scores

    # ====== UI ======
    st.markdown(f"# {PAGE_TITLE}")

    # Kontakt (lÃ¥sta fÃ¤lt)
    st.markdown("<div class='contact-title'>Kontaktuppgifter</div>", unsafe_allow_html=True)
    with st.container():
        st.markdown("<div class='card contact-card'>", unsafe_allow_html=True)
        base = st.session_state.get("kontakt", {"Namn":"","FÃ¶retag":"","Telefon":"","E-post":"","Funktion":"Chef","Unikt id":""})
        c1,c2,c3 = st.columns([0.4,0.3,0.3])
        with c1:
            st.text_input("Namn", value=base.get("Namn",""), disabled=True)
            st.text_input("E-post", value=base.get("E-post",""), disabled=True)
        with c2:
            st.text_input("FÃ¶retag", value=base.get("FÃ¶retag",""), disabled=True)
            st.text_input("Telefon", value=base.get("Telefon",""), disabled=True)
        with c3:
            st.text_input("Funktion", value=base.get("Funktion",""), disabled=True)
            st.text_input("Unikt id", value=base.get("Unikt id",""), disabled=True)
        st.markdown("</div>", unsafe_allow_html=True)

    # Resultatkorten (68/32)
    for s in SECTIONS:
        left, right = st.columns([0.68, 0.32])
        with left:
            st.header(s["title"])
            for p in s["text"].split("\n\n"):
                st.write(p)
        with right:
            key, mx = s["key"], s["max"]
            chef = int(scores.get(key,{}).get("chef",0))
            over = int(scores.get(key,{}).get("overchef",0))
            med  = int(scores.get(key,{}).get("medarbetare",0))

            st.markdown("<div class='right-wrap'>", unsafe_allow_html=True)
            card = [f"<div class='card res-card'>"]

            def bar(lbl, val, maxv, cls):
                pct = 0 if maxv==0 else val/maxv*100
                return [
                    f"<span class='role-label'>{lbl}: {val} poÃ¤ng</span>",
                    f"<div class='barbg'><span class='barfill {cls}' style='width:{pct:.0f}%'></span></div>",
                ]

            card += bar("Chef", chef, mx, "bar-green")
            card += bar("Ã–verordnad chef", over, mx, "bar-orange")
            card += bar("Medarbetare", med, mx, "bar-blue")
            card += [f"<div class='maxline'>Max: {mx} poÃ¤ng</div>", "</div>"]
            st.markdown("\n".join(card), unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)

    # PDF
    st.divider()
    st.caption("Ladda ner en PDF som speglar innehÃ¥llet.")
    pdf_bytes = pdf_from_page(PAGE_TITLE, SECTIONS, scores, st.session_state.get("kontakt", {}))
    st.download_button("Ladda ner PDF", data=pdf_bytes, file_name="sjÃ¤lvskattning_funktionellt_ledarskap.pdf", mime="application/pdf", type="primary")

    if st.button("â—€ Till startsidan"):
        st.session_state["page"] = "landing"
        do_rerun()

# =============================
# Router
# =============================
if "page" not in st.session_state:
    st.session_state["page"] = "landing"

page = st.session_state["page"]
if page == "landing":
    render_landing()
elif page == "id_page":
    render_id_page()
elif page == "chef_survey":
    render_chef_survey()
elif page == "other_survey":
    render_other_survey()
elif page == "over_survey":
    render_over_survey()
else:
    render_assessment()
