# app.py â€“ komplett app (svenska)
from __future__ import annotations

from io import BytesIO
from datetime import datetime
import os
import secrets
import string
import textwrap
from typing import List, Tuple

import requests
import streamlit as st
from reportlab.lib.colors import Color, HexColor, black
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# GrundinstÃ¤llningar & tema
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
st.set_page_config(page_title="SjÃ¤lvskattning â€“ Funktionellt ledarskap",
                   page_icon="ðŸ“„", layout="centered")

EGGSHELL = "#FAF7F0"

st.markdown(f"""
<style>
  .stApp {{ background-color:{EGGSHELL}; }}
  .block-container {{ padding-top:2rem; padding-bottom:3rem; }}
  html, body, [class*="css"] {{ font-family: Helvetica, Arial, sans-serif; }}
  .stMarkdown h1 {{ font-size:29px; font-weight:700; margin:0 0 6px 0; }}
  .stMarkdown h2 {{ font-size:19px; font-weight:700; margin:24px 0 8px 0; }}
  .stMarkdown p, .stMarkdown {{ font-size:15px; line-height:21px; }}

  .note {{ border-left:6px solid #3B82F6; background:#EAF2FF; color:#0F172A;
           padding:14px 16px; border-radius:10px; }}

  .contact-card {{ background:#fff; border:1px solid rgba(0,0,0,.12); border-radius:12px;
                   padding:12px 14px; box-shadow:0 4px 16px rgba(0,0,0,.06); }}
  .contact-title {{ font-weight:700; font-size:19px; margin: 6px 0 10px 0; }}

  .right-wrap {{ display:flex; align-items:center; justify-content:center; }}
  .res-card {{ max-width:380px; width:100%; padding:16px 18px; border:1px solid rgba(0,0,0,.12);
               border-radius:12px; box-shadow:0 6px 20px rgba(0,0,0,.08); background:#fff; }}
  .role-label {{ font-size:13px; color:#111827; margin:10px 0 6px 0; display:block; font-weight:600; }}
  .barbg {{ width:100%; height:10px; background:#E9ECEF; border-radius:6px; overflow:hidden; }}
  .barfill {{ height:10px; display:block; }}
  .bar-green {{ background:#4CAF50; }}
  .bar-orange {{ background:#F5A524; }}
  .bar-blue {{ background:#3B82F6; }}
  .maxline {{ font-size:13px; color:#374151; margin-top:12px; font-weight:600; }}

  /* Viktigt: sÃ¤nker resultatkortet till brÃ¶dtextens topp (inte rubriken) */
  .spacer-h2 {{ height: 34px; }}

  /* Hero (rubriken pÃ¥ startsidan) */
  .hero {{ text-align:center; padding:34px 28px; background:#fff; border:1px solid rgba(0,0,0,.12);
           border-radius:12px; box-shadow:0 6px 20px rgba(0,0,0,.06); margin-bottom:14px; }}
  .hero h1 {{ font-size:34px; margin:0 0 8px 0; }}
  .hero p  {{ color:#374151; margin:0; }}
</style>
""", unsafe_allow_html=True)


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Power Automate (valfritt â€“ sÃ¤tt miljÃ¶variablerna FLOW_LOOKUP_URL / FLOW_LOG_URL)
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
FLOW_LOOKUP_URL = os.getenv("FLOW_LOOKUP_URL", "").strip()
FLOW_LOG_URL    = os.getenv("FLOW_LOG_URL", "").strip()

def safe_post(url: str, payload: dict) -> Tuple[bool, dict | None, str | None]:
    if not url:
        return False, None, "No URL configured"
    try:
        r = requests.post(url, json=payload, timeout=20)
        if 200 <= r.status_code < 300:
            try:
                return True, (r.json() if r.content else {}), None
            except Exception:
                return True, {}, None
        return False, None, f"HTTP {r.status_code}: {r.text[:200]}"
    except Exception as e:
        return False, None, str(e)


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Texter, frÃ¥gor & grupper
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
PAGE_TITLE = "SjÃ¤lvskattning â€“ Funktionellt ledarskap"

SECTIONS = [
    {
        "key": "lyssnande",
        "title": "Aktivt lyssnande",
        "max": 49,
        "text": (
            "I dagens arbetsliv har chefens roll fÃ¶rÃ¤ndrats. Medarbetarna sitter ofta pÃ¥ den djupaste kompetensen och "
            "lÃ¶sningarna pÃ¥ verksamhetens utmaningar.\n\n"
            "DÃ¤rfÃ¶r Ã¤r aktivt lyssnande en av chefens viktigaste fÃ¤rdigheter. Det handlar inte bara om att hÃ¶ra vad som "
            "sÃ¤gs, utan om att fÃ¶rstÃ¥, visa intresse och anvÃ¤nda den information du fÃ¥r. NÃ¤r du bjuder in till dialog "
            "och tar till dig medarbetarnas perspektiv visar du att deras erfarenheter Ã¤r vÃ¤rdefulla.\n\n"
            "Genom att agera pÃ¥ det du hÃ¶r â€“ bekrÃ¤fta, fÃ¶lja upp och omsÃ¤tta idÃ©er i handling â€“ stÃ¤rker du bÃ¥de "
            "engagemang, fÃ¶rtroende och delaktighet."
        ),
    },
    {
        "key": "aterkoppling",
        "title": "Ã…terkoppling",
        "max": 56,
        "text": (
            "Effektiv Ã¥terkoppling Ã¤r grunden fÃ¶r bÃ¥de utveckling och motivation. Medarbetare behÃ¶ver veta vad som "
            "fÃ¶rvÃ¤ntas, hur de ligger till och hur de kan vÃ¤xa. NÃ¤r du som chef tydligt beskriver uppgifter och "
            "fÃ¶rvÃ¤ntade beteenden skapar du trygghet och fokus i arbetet.\n\n"
            "Ã…terkoppling handlar sedan om nÃ¤rvaro och uppfÃ¶ljning â€“ att se, lyssna och ge bÃ¥de berÃ¶m och konstruktiv "
            "feedback. Genom att tydligt lyfta fram vad som fungerar och vad som kan fÃ¶rbÃ¤ttras fÃ¶rstÃ¤rker du "
            "Ã¶nskvÃ¤rda beteenden och hjÃ¤lper dina medarbetare att lyckas.\n\n"
            "I svÃ¥ra situationer blir Ã¥terkopplingen extra viktig. Att vara lugn, konsekvent och tydlig nÃ¤r det blÃ¥ser "
            "visar ledarskap pÃ¥ riktigt."
        ),
    },
    {
        "key": "malinriktning",
        "title": "MÃ¥linriktning",
        "max": 35,
        "text": (
            "MÃ¥linriktat ledarskap handlar om att ge tydliga ramar â€“ tid, resurser och ansvar â€“ sÃ¥ att medarbetare kan "
            "arbeta effektivt och med trygghet. Tydliga och inspirerande mÃ¥l skapar riktning och hjÃ¤lper alla att "
            "fÃ¶rstÃ¥ vad som Ã¤r viktigt just nu.\n\n"
            "Som chef handlar det om att formulera mÃ¥l som gÃ¥r att tro pÃ¥, och att tydliggÃ¶ra hur de ska nÃ¥s. NÃ¤r du "
            "delegerar ansvar och befogenheter visar du fÃ¶rtroende och skapar engagemang. MÃ¥len blir dÃ¥ inte bara "
            "nÃ¥got att leverera pÃ¥ â€“ utan nÃ¥got att vara delaktig i.\n\n"
            "UppfÃ¶ljning Ã¤r nyckeln. Genom att uppmÃ¤rksamma framsteg, ge Ã¥terkoppling och fira resultat fÃ¶rstÃ¤rker du "
            "bÃ¥de prestation och motivation."
        ),
    },
]

CHEF_QUESTIONS = [
    "EfterfrÃ¥gar deras fÃ¶rslag nÃ¤r det gÃ¤ller hur arbetet kan fÃ¶rbÃ¤ttras",
    "EfterfrÃ¥gar deras idÃ©er nÃ¤r det gÃ¤ller planering av arbetet",
    "Uppmuntrar dem att uttrycka eventuella farhÃ¥gor nÃ¤r det gÃ¤ller arbetet",
    "Uppmuntrar dem att komma med fÃ¶rbÃ¤ttringsfÃ¶rslag fÃ¶r verksamheten",
    "Uppmuntrar dem att uttrycka idÃ©er och fÃ¶rslag",
    "AnvÃ¤nder dig av deras fÃ¶rslag nÃ¤r du fattar beslut som berÃ¶r dem",
    "Ã–vervÃ¤ger deras idÃ©er Ã¤ven nÃ¤r du inte hÃ¥ller med",
    "Talar om deras arbete som meningsfullt och viktigt",
    "Formulerar inspirerande mÃ¥lsÃ¤ttningar fÃ¶r deras arbete",
    "Beskriver hur deras arbete bidrar till viktiga vÃ¤rderingar och ideal",
    "Pratar pÃ¥ ett inspirerande sÃ¤tt om deras arbete",
    "Beskriver hur deras arbete bidrar till verksamhetens mÃ¥l",
    "Ã„r tydlig med hur deras arbete bidrar till verksamhetens effektivitet",
    "TillhandahÃ¥ller information som visar pÃ¥ betydelsen av deras arbete",
    "AnvÃ¤nder fakta och logik nÃ¤r du beskriver betydelsen av deras arbete",
    "Beskriver vilka arbetsuppgifter du vill att de utfÃ¶r",
    "Beskriver tidsplaner fÃ¶r de arbetsuppgifter du delegerar till dem",
    "Kommunicerar verksamhetens mÃ¥lsÃ¤ttningar pÃ¥ ett tydligt sÃ¤tt",
    "Ã„r tydlig med vad du fÃ¶rvÃ¤ntar dig av dem",
    "Ser till att dina medarbetares arbete samordnas",
]
EMP_QUESTIONS = CHEF_QUESTIONS
OVER_QUESTIONS = [
    "EfterfrÃ¥gar andras fÃ¶rslag nÃ¤r det gÃ¤ller hur hens verksamhet kan fÃ¶rbÃ¤ttras",
    "EfterfrÃ¥gar andras idÃ©er nÃ¤r det gÃ¤ller planering av hens verksamhet",
    "Uppmuntrar andra att uttrycka eventuella farhÃ¥gor nÃ¤r det gÃ¤ller hens verksamhet",
    "Uppmuntrar andra att komma med fÃ¶rbÃ¤ttringsfÃ¶rslag fÃ¶r hens verksamhet",
    "Uppmuntrar andra att uttrycka idÃ©er och fÃ¶rslag",
    "AnvÃ¤nder sig av andras fÃ¶rslag nÃ¤r hen fattar beslut som berÃ¶r dem",
    "Ã–vervÃ¤ger andras idÃ©er Ã¤ven nÃ¤r hen inte hÃ¥ller med om dem",
    "Talar om sin verksamhet som meningsfull och viktig",
    "Formulerar inspirerande mÃ¥lsÃ¤ttningar",
    "Beskriver viktiga vÃ¤rderingar och ideal",
    "Pratar pÃ¥ ett inspirerande sÃ¤tt",
    "Beskriver sin verksamhets mÃ¥l",
    "Ã„r tydlig med sin verksamhets effektivitet",
    "TillhandahÃ¥ller relevant information",
    "AnvÃ¤nder fakta och logik",
    "Beskriver vem som Ã¤r ansvarig fÃ¶r vad",
    "Beskriver tidsplaner fÃ¶r de arbetsuppgifter som ska gÃ¶ras",
    "Kommunicerar verksamhetens mÃ¥lsÃ¤ttningar pÃ¥ ett tydligt sÃ¤tt",
    "Ã„r tydlig med vad hen fÃ¶rvÃ¤ntar sig av andra",
    "Ser till att arbetet samordnas",
]

IDX_MAP = {"lyssnande": list(range(0, 7)),
           "aterkoppling": list(range(7, 15)),
           "malinriktning": list(range(15, 20))}

INSTR_CHEF = (
    "**Chef**\n\n"
    "Syftet Ã¤r att du ska beskriva hur du kommunicerar med dina medarbetare i frÃ¥gor som rÃ¶r deras arbete.\n\n"
    "AnvÃ¤nd fÃ¶ljande svarsskala:\n\n"
    "**1 = Aldrig, 2 = NÃ¤stan aldrig, 3 = SÃ¤llan, 4 = Ibland, 5 = Ofta, 6 = NÃ¤stan alltid, 7 = Alltid**.\n\n"
    "Ange hur ofta **du** gÃ¶r fÃ¶ljande:"
)
INSTR_EMP = (
    "**Medarbetare**\n\n"
    "Syftet Ã¤r att du ska beskriva hur din chef kommunicerar med dig i frÃ¥gor som rÃ¶r ditt arbete.\n\n"
    "AnvÃ¤nd fÃ¶ljande svarsskala:\n\n"
    "**1 = Aldrig, 2 = NÃ¤stan aldrig, 3 = SÃ¤llan, 4 = Ibland, 5 = Ofta, 6 = NÃ¤stan alltid, 7 = Alltid**.\n\n"
    "Ange hur ofta **din chef** gÃ¶r fÃ¶ljande:"
)
INSTR_OVER = (
    "**Ã–verordnad chef**\n\n"
    "Syftet Ã¤r att du ska beskriva hur din understÃ¤llda chef kommunicerar i arbetsrelaterade frÃ¥gor.\n\n"
    "AnvÃ¤nd fÃ¶ljande svarsskala:\n\n"
    "**1 = Aldrig, 2 = NÃ¤stan aldrig, 3 = SÃ¤llan, 4 = Ibland, 5 = Ofta, 6 = NÃ¤stan alltid, 7 = Alltid**.\n\n"
    "Ange hur ofta **din understÃ¤llda chef** gÃ¶r fÃ¶ljande:"
)

ROLE_LABELS = {"chef": "Chef", "overchef": "Ã–verordnad chef", "medarbetare": "Medarbetare"}
ROLE_ORDER  = ["chef", "overchef", "medarbetare"]


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# HjÃ¤lpfunktioner
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def generate_unikt_id(n: int = 8) -> str:
    alphabet = string.ascii_uppercase + string.digits
    return "".join(secrets.choice(alphabet) for _ in range(n))

def rerun():
    try: st.rerun()
    except AttributeError: st.experimental_rerun()

def sum_by_index(values: List[int | None], idxs: List[int]) -> int:
    return sum(v for i, v in enumerate(values) if i in idxs and isinstance(v, int))

def render_instruction(md: str):
    st.markdown(f"<div class='note'>{md}</div>", unsafe_allow_html=True)
    st.caption("Svara pÃ¥ varje pÃ¥stÃ¥ende pÃ¥ en skala 1â€“7. Du mÃ¥ste besvara alla frÃ¥gor pÃ¥ sidan fÃ¶r att gÃ¥ vidare.")

def radio_row(key_prefix: str, i: int, current: int | None):
    idx = [1,2,3,4,5,6,7].index(current) if isinstance(current, int) and 1 <= current <= 7 else None
    st.radio("", [1,2,3,4,5,6,7], index=idx, horizontal=True,
             label_visibility="collapsed", key=f"{key_prefix}_{i}")


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Sidor
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def landing():
    # Hero-rubrik (Ã¥terstÃ¤lld rubrikdel pÃ¥ startsidan)
    st.markdown(
        """
        <div class="hero">
          <h1>SjÃ¤lvskattning â€“ Funktionellt ledarskap</h1>
          <p>Fyll i dina uppgifter nedan och starta sjÃ¤lvskattningen.</p>
        </div>
        """,
        unsafe_allow_html=True,
    )

    d = st.session_state.get("kontakt", {"Namn":"","FÃ¶retag":"","Telefon":"","E-post":"","Funktion":"Chef","Unikt id":""})
    with st.form("landing"):
        c1, c2 = st.columns([0.5, 0.5])
        with c1:
            namn = st.text_input("Namn", value=d["Namn"])
            tel  = st.text_input("Telefon", value=d["Telefon"])
            fun  = st.selectbox("Funktion", ["Chef","Ã–verordnad chef","Medarbetare"],
                                index=["Chef","Ã–verordnad chef","Medarbetare"].index(d["Funktion"]))
        with c2:
            fore = st.text_input("FÃ¶retag", value=d["FÃ¶retag"])
            mail = st.text_input("E-post", value=d["E-post"])
        start = st.form_submit_button("Starta", type="primary")

    if start:
        if not namn.strip() or not mail.strip():
            st.warning("Fyll i minst Namn och E-post."); return
        unikt = generate_unikt_id() if fun == "Chef" else ""
        st.session_state["kontakt"] = {"Namn":namn.strip(),"FÃ¶retag":fore.strip(),"Telefon":tel.strip(),
                                       "E-post":mail.strip(),"Funktion":fun,"Unikt id":unikt}
        if fun == "Chef":
            st.session_state["chef_answers"] = [None]*20
            st.session_state["survey_page"] = 0
            st.session_state["page"] = "chef_survey"
        else:
            st.session_state["page"] = "id_page"
        rerun()

def id_page():
    st.markdown("## Ange uppgifter fÃ¶r chefens sjÃ¤lvskattning")
    st.info("Detta steg gÃ¤ller fÃ¶r Ã–verordnad chef och Medarbetare.")
    base = st.session_state.get("kontakt", {})
    with st.form("idform"):
        c1, c2 = st.columns([0.55, 0.45])
        with c1:
            first = st.text_input("Chefens fÃ¶rnamn", value=base.get("Chefens fÃ¶rnamn",""))
            uid   = st.text_input("Unikt id", value=base.get("Unikt id",""))
        with c2:
            st.write(""); st.write(f"**Din roll:** {base.get('Funktion','')}")
        ok = st.form_submit_button("FortsÃ¤tt", type="primary")

    if ok:
        if not first.strip() or not uid.strip():
            st.warning("Fyll i bÃ¥de **Chefens fÃ¶rnamn** och **Unikt id**."); return
        _ = safe_post(FLOW_LOG_URL, {"action":"log","uniqueId":uid.strip(),"firstName":first.strip(),
                                     "role":"overchef" if base.get("Funktion")=="Ã–verordnad chef" else "medarbetare",
                                     "timestamp": datetime.utcnow().isoformat()+"Z"})
        ok_lu, data_lu, _ = safe_post(FLOW_LOOKUP_URL, {"action":"lookup","uniqueId":uid.strip()})
        st.session_state["kontakt"]["Unikt id"] = uid.strip()
        st.session_state["kontakt"]["Chefens fÃ¶rnamn"] = first.strip()
        if ok_lu and data_lu and data_lu.get("found"):
            for k in ("name","company","email"):
                if data_lu.get(k):
                    st.session_state["kontakt"]["Namn" if k=="name" else ("FÃ¶retag" if k=="company" else "E-post")] = data_lu[k]
        if base.get("Funktion") == "Medarbetare":
            st.session_state["other_answers"] = [None]*20
            st.session_state["other_page"] = 0
            st.session_state["page"] = "other_survey"
        else:
            st.session_state["over_answers"] = [None]*20
            st.session_state["over_page"] = 0
            st.session_state["page"] = "over_survey"
        rerun()

    if st.button("â—€ Tillbaka"): st.session_state["page"]="landing"; rerun()

def survey_core(title: str, instruction: str, questions: List[str], answers_key: str, page_key: str):
    st.markdown(f"## {title}"); render_instruction(instruction)

    if st.session_state.get("scroll_to_top"):
        st.markdown("<script>window.scrollTo(0,0);</script>", unsafe_allow_html=True)
        st.session_state["scroll_to_top"] = False

    ans = st.session_state.get(answers_key, [None]*20)
    page = st.session_state.get(page_key, 0)

    per = 5; start, end = page*per, page*per+per
    for i, q in enumerate(questions[start:end], start=start+1):
        st.markdown(f"**{i}. {q}**"); radio_row(answers_key, i, ans[i-1])
        st.session_state[answers_key][i-1] = st.session_state.get(f"{answers_key}_{i}")
        if i < end: st.divider()

    left, right = st.columns([0.5, 0.5])
    with left:
        if page > 0 and st.button("â—€ Tillbaka"):
            st.session_state[page_key] = page - 1; st.session_state["scroll_to_top"] = True; rerun()
    with right:
        ok_page = all(isinstance(v,int) and 1<=v<=7 for v in st.session_state[answers_key][start:end])
        if page < 3:
            if st.button("NÃ¤sta â–¶", disabled=not ok_page):
                st.session_state[page_key] = page + 1; st.session_state["scroll_to_top"] = True; rerun()
        else:
            if st.button("Skicka sjÃ¤lvskattning", type="primary", disabled=not ok_page):
                st.session_state["page"] = "assessment"; rerun()

def chef_survey():  survey_core("SjÃ¤lvskattning (Chef)", INSTR_CHEF, CHEF_QUESTIONS, "chef_answers", "survey_page")
def other_survey(): survey_core("SjÃ¤lvskattning (Medarbetare)", INSTR_EMP, EMP_QUESTIONS, "other_answers", "other_page")
def over_survey():  survey_core("SjÃ¤lvskattning (Ã–verordnad chef)", INSTR_OVER, OVER_QUESTIONS, "over_answers", "over_page")


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Resultat
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def assessment():
    # summera
    scores = st.session_state.get("scores", {"lyssnande":{}, "aterkoppling":{}, "malinriktning":{}})
    if "chef_answers"  in st.session_state:
        a = st.session_state["chef_answers"]
        scores["lyssnande"]["chef"]     = sum_by_index(a, IDX_MAP["lyssnande"])
        scores["aterkoppling"]["chef"]  = sum_by_index(a, IDX_MAP["aterkoppling"])
        scores["malinriktning"]["chef"] = sum_by_index(a, IDX_MAP["malinriktning"])
    if "other_answers" in st.session_state:
        a = st.session_state["other_answers"]
        scores["lyssnande"]["medarbetare"]     = sum_by_index(a, IDX_MAP["lyssnande"])
        scores["aterkoppling"]["medarbetare"]  = sum_by_index(a, IDX_MAP["aterkoppling"])
        scores["malinriktning"]["medarbetare"] = sum_by_index(a, IDX_MAP["malinriktning"])
    if "over_answers"  in st.session_state:
        a = st.session_state["over_answers"]
        scores["lyssnande"]["overchef"]     = sum_by_index(a, IDX_MAP["lyssnande"])
        scores["aterkoppling"]["overchef"]  = sum_by_index(a, IDX_MAP["aterkoppling"])
        scores["malinriktning"]["overchef"] = sum_by_index(a, IDX_MAP["malinriktning"])
    st.session_state["scores"] = scores

    st.markdown(f"# {PAGE_TITLE}")

    # Kontakt (lÃ¥sta fÃ¤lt)
    st.markdown("<div class='contact-title'>Kontaktuppgifter</div>", unsafe_allow_html=True)
    with st.container():
        st.markdown("<div class='contact-card'>", unsafe_allow_html=True)
        base = st.session_state.get("kontakt", {"Namn":"","FÃ¶retag":"","Telefon":"","E-post":"","Funktion":"Chef","Unikt id":""})
        c1, c2, c3 = st.columns([0.4, 0.3, 0.3])
        with c1:
            st.text_input("Namn", value=base.get("Namn",""), disabled=True)
            st.text_input("E-post", value=base.get("E-post",""), disabled=True)
        with c2:
            st.text_input("FÃ¶retag", value=base.get("FÃ¶retag",""), disabled=True)
            st.text_input("Telefon", value=base.get("Telefon",""), disabled=True)
        with c3:
            st.text_input("Funktion", value=base.get("Funktion",""), disabled=True)
            st.text_input("Unikt id", value=base.get("Unikt id",""), disabled=True)
        st.markdown("</div>", unsafe_allow_html=True)

    # Sektioner â€“ 68/32 + resultatkort linjerat med brÃ¶dtext
    for s in SECTIONS:
        left, right = st.columns([0.68, 0.32])
        with left:
            st.header(s["title"])
            for p in s["text"].split("\n\n"):
                st.write(p)
        with right:
            st.markdown("<div class='spacer-h2'></div>", unsafe_allow_html=True)
            key, mx = s["key"], s["max"]
            chef = int(scores.get(key,{}).get("chef",0))
            over = int(scores.get(key,{}).get("overchef",0))
            med  = int(scores.get(key,{}).get("medarbetare",0))

            st.markdown("<div class='right-wrap'>", unsafe_allow_html=True)
            html = ["<div class='res-card'>"]
            def bar(lbl, val, maxv, cls):
                pct = 0 if maxv==0 else val/maxv*100
                return [
                    f"<span class='role-label'>{lbl}: {val} poÃ¤ng</span>",
                    f"<div class='barbg'><span class='barfill {cls}' style='width:{pct:.0f}%'></span></div>",
                ]
            html += bar("Chef", chef, mx, "bar-green")
            html += bar("Ã–verordnad chef", over, mx, "bar-orange")
            html += bar("Medarbetare", med, mx, "bar-blue")
            html += [f"<div class='maxline'>Max: {mx} poÃ¤ng</div>", "</div>"]
            st.markdown("\n".join(html), unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)

    st.divider()
    st.caption("Ladda ner PDF som speglar sidan (samma 68/32-linje).")
    pdf = build_pdf(PAGE_TITLE, SECTIONS, scores, st.session_state.get("kontakt", {}))
    k = st.session_state.get("kontakt", {})
    pdf_name = f"SjÃ¤lvskattning - {k.get('Namn') or 'Person'} - {k.get('FÃ¶retag') or 'FÃ¶retag'}.pdf"
    st.download_button("Ladda ner PDF", data=pdf, file_name=pdf_name,
                       mime="application/pdf", type="primary")

    if st.button("â—€ Till startsidan"):
        st.session_state["page"] = "landing"; rerun()


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# PDF â€“ tvÃ¥ kolumner 68/32, staplar i linje med brÃ¶dtext
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def build_pdf(title: str, sections, results_map, contact: dict) -> bytes:
    buf = BytesIO()
    pdf = canvas.Canvas(buf, pagesize=A4)
    w, h = A4

    pdf.setFillColor(HexColor(EGGSHELL)); pdf.rect(0,0,w,h,fill=1,stroke=0)
    pdf.setFillColor(black)
    pdf.setTitle("sjÃ¤lvskattning_funktionellt_ledarskap.pdf")

    margin = 50; y = h - 60
    pdf.setFont("Helvetica-Bold", 22); pdf.drawString(margin, y, title)
    pdf.setFont("Helvetica", 9); pdf.drawRightString(w - margin, y+4, datetime.now().strftime("Genererad: %Y-%m-%d %H:%M"))
    y -= 28

    # Kontakt
    pdf.setFont("Helvetica-Bold", 10); pdf.drawString(margin, y, "Kontaktuppgifter"); y -= 14
    pdf.setFont("Helvetica", 10)
    row = [
        f"Unikt id: {contact.get('Unikt id','')}",
        f"Namn: {contact.get('Namn','')}",
        f"FÃ¶retag: {contact.get('FÃ¶retag','')}",
        f"Telefon: {contact.get('Telefon','')}",
        f"E-post: {contact.get('E-post','')}",
    ]
    line = "   |   ".join(row)
    if len(line) > 110:
        mid = len(row)//2
        pdf.drawString(margin, y, "   |   ".join(row[:mid])); y -= 14
        pdf.drawString(margin, y, "   |   ".join(row[mid:])); y -= 8
    else:
        pdf.drawString(margin, y, line); y -= 14

    def ensure(px: int):
        nonlocal y
        if y - px < 50:
            pdf.showPage(); pdf.setFillColor(HexColor(EGGSHELL)); pdf.rect(0,0,w,h,fill=1,stroke=0)
            pdf.setFillColor(black); pdf.setFont("Helvetica",9); pdf.drawString(margin, h-40, title); y = h - 60

    bar_bg = Color(0.91,0.92,0.94); green=Color(0.30,0.69,0.31); orange=Color(0.96,0.65,0.15); blue=Color(0.23,0.51,0.96)

    # tvÃ¥ kolumner 68/32
    content_w = w - 2*margin
    left_w = content_w * 0.68
    right_w = content_w - left_w

    for s in sections:
        ensure(30)
        pdf.setFont("Helvetica-Bold", 14); pdf.drawString(margin, y, s["title"]); y -= 20

        y_top = y  # samma start fÃ¶r bÃ¥da kolumner

        # HÃ¶ger: staplar i linje med brÃ¶dtext
        y_right = y_top
        pdf.setFont("Helvetica", 10)
        for role, col in [("chef", green), ("overchef", orange), ("medarbetare", blue)]:
            val = int(results_map.get(s["key"], {}).get(role, 0))
            mx  = int(s["max"])
            pdf.drawString(margin + left_w + 10, y_right, f"{ROLE_LABELS[role]} â€“ Summa {val}/{mx}")
            y_right -= 12
            pdf.setFillColor(bar_bg); pdf.rect(margin + left_w + 10, y_right, right_w - 20, 8, fill=1, stroke=0)
            fw = 0 if mx==0 else (right_w - 20) * (val/mx)
            pdf.setFillColor(col); pdf.rect(margin + left_w + 10, y_right, fw, 8, fill=1, stroke=0)
            pdf.setFillColor(black); y_right -= 14

        # VÃ¤nster: brÃ¶dtext inom left_w
        pdf.setFont("Helvetica", 11)
        y_left = y_top
        approx_chars = max(40, int(95 * (left_w / content_w)))  # enkel approx fÃ¶r wrap
        for para in s["text"].split("\n\n"):
            for ln in textwrap.wrap(para, width=approx_chars):
                ensure(16); pdf.drawString(margin, y_left, ln); y_left -= 16
            y_left -= 4

        y = min(y_left, y_right) - 12  # nÃ¤sta sektion under lÃ¤gsta punkt

    pdf.showPage(); pdf.save(); buf.seek(0); return buf.getvalue()


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Router
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
st.session_state.setdefault("page", "landing")

ROUTES = {
    "landing": landing,
    "id_page": id_page,
    "chef_survey": chef_survey,
    "other_survey": other_survey,
    "over_survey": over_survey,
    "assessment": assessment,
}
ROUTES[st.session_state["page"]]()
